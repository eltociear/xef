/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.api

import com.xebia.functional.openai.Config
import com.xebia.functional.openai.UploadFile
import com.xebia.functional.openai.appendGen
import com.xebia.functional.openai.generated.api.Files.*
import com.xebia.functional.openai.generated.model.DeleteFileResponse
import com.xebia.functional.openai.generated.model.ListFilesResponse
import com.xebia.functional.openai.generated.model.OpenAIFile
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.formData
import io.ktor.client.request.parameter
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.path
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

/**  */
interface Files {

  /** enum for parameter purpose */
  @Serializable
  enum class PurposeCreateFile(val value: kotlin.String) {

    @SerialName(value = "fine-tune") fine_tune("fine-tune"),
    @SerialName(value = "assistants") assistants("assistants")
  }

  /**
   * Upload a file that can be used across various endpoints. The size of all the files uploaded by
   * one organization can be up to 100 GB. The size of individual files can be a maximum of 512 MB
   * or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to
   * learn more about the types of files supported. The Fine-tuning API only supports
   * &#x60;.jsonl&#x60; files. Please [contact us](https://help.openai.com/) if you need to increase
   * these storage limits.
   *
   * @param file The File object (not file name) to be uploaded.
   * @param purpose The intended purpose of the uploaded file. Use \\\&quot;fine-tune\\\&quot; for
   *   [Fine-tuning](/docs/api-reference/fine-tuning) and \\\&quot;assistants\\\&quot; for
   *   [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages).
   *   This allows us to validate the format of the uploaded file is correct for fine-tuning.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return OpenAIFile
   */
  suspend fun createFile(
    file: UploadFile,
    purpose: PurposeCreateFile,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): OpenAIFile

  /**
   * Delete a file.
   *
   * @param fileId The ID of the file to use for this request.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return DeleteFileResponse
   */
  suspend fun deleteFile(
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): DeleteFileResponse

  /**
   * Returns the contents of the specified file.
   *
   * @param fileId The ID of the file to use for this request.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return kotlin.String
   */
  suspend fun downloadFile(
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): kotlin.String

  /**
   * Returns a list of files that belong to the user&#39;s organization.
   *
   * @param purpose Only return files with the given purpose. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListFilesResponse
   */
  suspend fun listFiles(
    purpose: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListFilesResponse

  /**
   * Returns information about a specific file.
   *
   * @param fileId The ID of the file to use for this request.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return OpenAIFile
   */
  suspend fun retrieveFile(
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): OpenAIFile
}

fun Files(client: HttpClient, config: Config): Files =
  object : Files {
    override suspend fun createFile(
      file: UploadFile,
      purpose: PurposeCreateFile,
      configure: HttpRequestBuilder.() -> Unit
    ): OpenAIFile =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("files") }
          setBody(
            formData {
              file?.apply { appendGen("file", file) }
              purpose?.apply { appendGen("purpose", purpose) }
            }
          )
        }
        .body()

    override suspend fun deleteFile(
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): DeleteFileResponse =
      client
        .request {
          configure()
          method = HttpMethod.Delete
          contentType(ContentType.Application.Json)
          url { path("files/{file_id}".replace("{" + "file_id" + "}", "$fileId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun downloadFile(
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): kotlin.String =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url { path("files/{file_id}/content".replace("{" + "file_id" + "}", "$fileId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listFiles(
      purpose: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListFilesResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("purpose", purpose)
          url { path("files") }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun retrieveFile(
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): OpenAIFile =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url { path("files/{file_id}".replace("{" + "file_id" + "}", "$fileId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()
  }
