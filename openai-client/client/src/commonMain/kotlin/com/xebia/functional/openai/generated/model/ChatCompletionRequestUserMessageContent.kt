/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.model

import kotlin.jvm.JvmInline
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

@Serializable(with = ChatCompletionRequestUserMessageContentSerializer::class)
sealed interface ChatCompletionRequestUserMessageContent {

  @JvmInline
  @Serializable
  value class CaseString(val value: kotlin.String) : ChatCompletionRequestUserMessageContent

  @JvmInline
  @Serializable
  value class CaseChatCompletionRequestMessageContentParts(
    val value: kotlin.collections.List<ChatCompletionRequestMessageContentPart>
  ) : ChatCompletionRequestUserMessageContent
}

private object ChatCompletionRequestUserMessageContentSerializer :
  KSerializer<ChatCompletionRequestUserMessageContent> {
  @OptIn(InternalSerializationApi::class, ExperimentalSerializationApi::class)
  override val descriptor: SerialDescriptor =
    buildSerialDescriptor("ChatCompletionRequestUserMessageContent", PolymorphicKind.SEALED) {
      element("1", kotlin.String.serializer().descriptor)
      element("2", ListSerializer(ChatCompletionRequestMessageContentPart.serializer()).descriptor)
    }

  override fun deserialize(decoder: Decoder): ChatCompletionRequestUserMessageContent {
    val json = decoder.decodeSerializableValue(JsonElement.serializer())
    return kotlin
      .runCatching {
        ChatCompletionRequestUserMessageContent.CaseString(
          Json.decodeFromJsonElement(kotlin.String.serializer(), json)
        )
      }
      .getOrNull()
      ?: kotlin
        .runCatching {
          ChatCompletionRequestUserMessageContent.CaseChatCompletionRequestMessageContentParts(
            Json.decodeFromJsonElement(
              ListSerializer(ChatCompletionRequestMessageContentPart.serializer()),
              json
            )
          )
        }
        .getOrThrow()
  }

  override fun serialize(encoder: Encoder, value: ChatCompletionRequestUserMessageContent) =
    when (value) {
      is ChatCompletionRequestUserMessageContent.CaseString ->
        encoder.encodeSerializableValue(kotlin.String.serializer(), value.value)
      is ChatCompletionRequestUserMessageContent.CaseChatCompletionRequestMessageContentParts ->
        encoder.encodeSerializableValue(
          ListSerializer(ChatCompletionRequestMessageContentPart.serializer()),
          value.value
        )
    }
}
