/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.model

import kotlin.jvm.JvmInline
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

@Serializable(with = CreateThreadAndRunRequestToolsInnerSerializer::class)
sealed interface CreateThreadAndRunRequestToolsInner {

  @JvmInline
  @Serializable
  value class CaseAssistantToolsCode(val value: AssistantToolsCode) :
    CreateThreadAndRunRequestToolsInner

  @JvmInline
  @Serializable
  value class CaseAssistantToolsFunction(val value: AssistantToolsFunction) :
    CreateThreadAndRunRequestToolsInner

  @JvmInline
  @Serializable
  value class CaseAssistantToolsRetrieval(val value: AssistantToolsRetrieval) :
    CreateThreadAndRunRequestToolsInner
}

private object CreateThreadAndRunRequestToolsInnerSerializer :
  KSerializer<CreateThreadAndRunRequestToolsInner> {
  @OptIn(InternalSerializationApi::class, ExperimentalSerializationApi::class)
  override val descriptor: SerialDescriptor =
    buildSerialDescriptor("CreateThreadAndRunRequestToolsInner", PolymorphicKind.SEALED) {
      element("1", AssistantToolsCode.serializer().descriptor)
      element("2", AssistantToolsFunction.serializer().descriptor)
      element("3", AssistantToolsRetrieval.serializer().descriptor)
    }

  override fun deserialize(decoder: Decoder): CreateThreadAndRunRequestToolsInner {
    val json = decoder.decodeSerializableValue(JsonElement.serializer())
    return kotlin
      .runCatching {
        CreateThreadAndRunRequestToolsInner.CaseAssistantToolsCode(
          Json.decodeFromJsonElement(AssistantToolsCode.serializer(), json)
        )
      }
      .getOrNull()
      ?: kotlin
        .runCatching {
          CreateThreadAndRunRequestToolsInner.CaseAssistantToolsFunction(
            Json.decodeFromJsonElement(AssistantToolsFunction.serializer(), json)
          )
        }
        .getOrNull()
      ?: kotlin
        .runCatching {
          CreateThreadAndRunRequestToolsInner.CaseAssistantToolsRetrieval(
            Json.decodeFromJsonElement(AssistantToolsRetrieval.serializer(), json)
          )
        }
        .getOrThrow()
  }

  override fun serialize(encoder: Encoder, value: CreateThreadAndRunRequestToolsInner) =
    when (value) {
      is CreateThreadAndRunRequestToolsInner.CaseAssistantToolsCode ->
        encoder.encodeSerializableValue(AssistantToolsCode.serializer(), value.value)
      is CreateThreadAndRunRequestToolsInner.CaseAssistantToolsFunction ->
        encoder.encodeSerializableValue(AssistantToolsFunction.serializer(), value.value)
      is CreateThreadAndRunRequestToolsInner.CaseAssistantToolsRetrieval ->
        encoder.encodeSerializableValue(AssistantToolsRetrieval.serializer(), value.value)
    }
}
