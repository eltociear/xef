/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.model

import kotlin.jvm.JvmInline
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

@Serializable(with = CreateChatCompletionRequestFunctionCallSerializer::class)
sealed interface CreateChatCompletionRequestFunctionCall {

  @JvmInline
  @Serializable
  value class CaseChatCompletionFunctionCallOption(val value: ChatCompletionFunctionCallOption) :
    CreateChatCompletionRequestFunctionCall

  @JvmInline
  @Serializable
  value class CaseString(val value: kotlin.String) : CreateChatCompletionRequestFunctionCall
}

private object CreateChatCompletionRequestFunctionCallSerializer :
  KSerializer<CreateChatCompletionRequestFunctionCall> {
  @OptIn(InternalSerializationApi::class, ExperimentalSerializationApi::class)
  override val descriptor: SerialDescriptor =
    buildSerialDescriptor("CreateChatCompletionRequestFunctionCall", PolymorphicKind.SEALED) {
      element("1", ChatCompletionFunctionCallOption.serializer().descriptor)
      element("2", kotlin.String.serializer().descriptor)
    }

  override fun deserialize(decoder: Decoder): CreateChatCompletionRequestFunctionCall {
    val json = decoder.decodeSerializableValue(JsonElement.serializer())
    return kotlin
      .runCatching {
        CreateChatCompletionRequestFunctionCall.CaseChatCompletionFunctionCallOption(
          Json.decodeFromJsonElement(ChatCompletionFunctionCallOption.serializer(), json)
        )
      }
      .getOrNull()
      ?: kotlin
        .runCatching {
          CreateChatCompletionRequestFunctionCall.CaseString(
            Json.decodeFromJsonElement(kotlin.String.serializer(), json)
          )
        }
        .getOrThrow()
  }

  override fun serialize(encoder: Encoder, value: CreateChatCompletionRequestFunctionCall) =
    when (value) {
      is CreateChatCompletionRequestFunctionCall.CaseChatCompletionFunctionCallOption ->
        encoder.encodeSerializableValue(ChatCompletionFunctionCallOption.serializer(), value.value)
      is CreateChatCompletionRequestFunctionCall.CaseString ->
        encoder.encodeSerializableValue(kotlin.String.serializer(), value.value)
    }
}
