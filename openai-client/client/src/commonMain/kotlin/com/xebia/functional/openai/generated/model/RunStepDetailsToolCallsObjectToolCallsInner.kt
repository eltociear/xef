/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.model

import kotlin.jvm.JvmInline
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

@Serializable(with = RunStepDetailsToolCallsObjectToolCallsInnerSerializer::class)
sealed interface RunStepDetailsToolCallsObjectToolCallsInner {

  @JvmInline
  @Serializable
  value class First(val value: RunStepDetailsToolCallsCodeObject) :
    RunStepDetailsToolCallsObjectToolCallsInner

  @JvmInline
  @Serializable
  value class Second(val value: RunStepDetailsToolCallsFunctionObject) :
    RunStepDetailsToolCallsObjectToolCallsInner

  @JvmInline
  @Serializable
  value class Third(val value: RunStepDetailsToolCallsRetrievalObject) :
    RunStepDetailsToolCallsObjectToolCallsInner
}

private object RunStepDetailsToolCallsObjectToolCallsInnerSerializer :
  KSerializer<RunStepDetailsToolCallsObjectToolCallsInner> {
  @OptIn(InternalSerializationApi::class, ExperimentalSerializationApi::class)
  override val descriptor: SerialDescriptor =
    buildSerialDescriptor("RunStepDetailsToolCallsObjectToolCallsInner", PolymorphicKind.SEALED) {
      element("First", RunStepDetailsToolCallsCodeObject.serializer().descriptor)
      element("Second", RunStepDetailsToolCallsFunctionObject.serializer().descriptor)
      element("Third", RunStepDetailsToolCallsRetrievalObject.serializer().descriptor)
    }

  override fun deserialize(decoder: Decoder): RunStepDetailsToolCallsObjectToolCallsInner {
    val json = decoder.decodeSerializableValue(JsonElement.serializer())
    return kotlin
      .runCatching {
        RunStepDetailsToolCallsObjectToolCallsInner.First(
          Json.decodeFromJsonElement(RunStepDetailsToolCallsCodeObject.serializer(), json)
        )
      }
      .getOrNull()
      ?: kotlin
        .runCatching {
          RunStepDetailsToolCallsObjectToolCallsInner.Second(
            Json.decodeFromJsonElement(RunStepDetailsToolCallsFunctionObject.serializer(), json)
          )
        }
        .getOrNull()
      ?: kotlin
        .runCatching {
          RunStepDetailsToolCallsObjectToolCallsInner.Third(
            Json.decodeFromJsonElement(RunStepDetailsToolCallsRetrievalObject.serializer(), json)
          )
        }
        .getOrThrow()
  }

  override fun serialize(encoder: Encoder, value: RunStepDetailsToolCallsObjectToolCallsInner) =
    when (value) {
      is RunStepDetailsToolCallsObjectToolCallsInner.First ->
        encoder.encodeSerializableValue(RunStepDetailsToolCallsCodeObject.serializer(), value.value)
      is RunStepDetailsToolCallsObjectToolCallsInner.Second ->
        encoder.encodeSerializableValue(
          RunStepDetailsToolCallsFunctionObject.serializer(),
          value.value
        )
      is RunStepDetailsToolCallsObjectToolCallsInner.Third ->
        encoder.encodeSerializableValue(
          RunStepDetailsToolCallsRetrievalObject.serializer(),
          value.value
        )
    }
}
