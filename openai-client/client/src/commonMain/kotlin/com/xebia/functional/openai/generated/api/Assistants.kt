/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.api

import com.xebia.functional.openai.AssistantEvent
import com.xebia.functional.openai.Config
import com.xebia.functional.openai.generated.api.Assistants.*
import com.xebia.functional.openai.generated.model.AssistantFileObject
import com.xebia.functional.openai.generated.model.AssistantObject
import com.xebia.functional.openai.generated.model.CreateAssistantFileRequest
import com.xebia.functional.openai.generated.model.CreateAssistantRequest
import com.xebia.functional.openai.generated.model.CreateMessageRequest
import com.xebia.functional.openai.generated.model.CreateRunRequest
import com.xebia.functional.openai.generated.model.CreateThreadAndRunRequest
import com.xebia.functional.openai.generated.model.CreateThreadRequest
import com.xebia.functional.openai.generated.model.DeleteAssistantFileResponse
import com.xebia.functional.openai.generated.model.DeleteAssistantResponse
import com.xebia.functional.openai.generated.model.DeleteThreadResponse
import com.xebia.functional.openai.generated.model.ListAssistantFilesResponse
import com.xebia.functional.openai.generated.model.ListAssistantsResponse
import com.xebia.functional.openai.generated.model.ListMessageFilesResponse
import com.xebia.functional.openai.generated.model.ListMessagesResponse
import com.xebia.functional.openai.generated.model.ListRunStepsResponse
import com.xebia.functional.openai.generated.model.ListRunsResponse
import com.xebia.functional.openai.generated.model.MessageFileObject
import com.xebia.functional.openai.generated.model.MessageObject
import com.xebia.functional.openai.generated.model.ModifyAssistantRequest
import com.xebia.functional.openai.generated.model.ModifyMessageRequest
import com.xebia.functional.openai.generated.model.ModifyRunRequest
import com.xebia.functional.openai.generated.model.ModifyThreadRequest
import com.xebia.functional.openai.generated.model.RunObject
import com.xebia.functional.openai.generated.model.RunStepObject
import com.xebia.functional.openai.generated.model.SubmitToolOutputsRunRequest
import com.xebia.functional.openai.generated.model.ThreadObject
import com.xebia.functional.openai.streamEvents
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.plugins.timeout
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.accept
import io.ktor.client.request.header
import io.ktor.client.request.parameter
import io.ktor.client.request.prepareRequest
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.HttpHeaders
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.path
import kotlin.time.Duration.Companion.seconds
import kotlin.time.DurationUnit
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.jsonObject

/**  */
interface Assistants {

  /**
   * Cancels a run that is &#x60;in_progress&#x60;.
   *
   * @param threadId The ID of the thread to which this run belongs.
   * @param runId The ID of the run to cancel.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun cancelRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject

  /**
   * Create an assistant with a model and instructions.
   *
   * @param createAssistantRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return AssistantObject
   */
  suspend fun createAssistant(
    createAssistantRequest: CreateAssistantRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): AssistantObject

  /**
   * Create an assistant file by attaching a [File](/docs/api-reference/files) to an
   * [assistant](/docs/api-reference/assistants).
   *
   * @param assistantId The ID of the assistant for which to create a File.
   * @param createAssistantFileRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return AssistantFileObject
   */
  suspend fun createAssistantFile(
    assistantId: kotlin.String,
    createAssistantFileRequest: CreateAssistantFileRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): AssistantFileObject

  /**
   * Create a message.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param createMessageRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return MessageObject
   */
  suspend fun createMessage(
    threadId: kotlin.String,
    createMessageRequest: CreateMessageRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): MessageObject

  /**
   * Create a run.
   *
   * @param threadId The ID of the thread to run.
   * @param createRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun createRun(
    threadId: kotlin.String,
    createRunRequest: CreateRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject

  /**
   * Streaming variant: Create a run. By default, the client is modified to timeout after 60
   * seconds. Which is overridable by the [configure].
   *
   * @param threadId The ID of the thread to run.
   * @param createRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return [Flow]<[AssistantEvent]>
   */
  fun createRunStream(
    threadId: kotlin.String,
    createRunRequest: CreateRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): Flow<AssistantEvent>

  /**
   * Create a thread.
   *
   * @param createThreadRequest (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ThreadObject
   */
  suspend fun createThread(
    createThreadRequest: CreateThreadRequest? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ThreadObject

  /**
   * Create a thread and run it in one request.
   *
   * @param createThreadAndRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun createThreadAndRun(
    createThreadAndRunRequest: CreateThreadAndRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject

  /**
   * Streaming variant: Create a thread and run it in one request. By default, the client is
   * modified to timeout after 60 seconds. Which is overridable by the [configure].
   *
   * @param createThreadAndRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return [Flow]<[AssistantEvent]>
   */
  fun createThreadAndRunStream(
    createThreadAndRunRequest: CreateThreadAndRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): Flow<AssistantEvent>

  /**
   * Delete an assistant.
   *
   * @param assistantId The ID of the assistant to delete.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return DeleteAssistantResponse
   */
  suspend fun deleteAssistant(
    assistantId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): DeleteAssistantResponse

  /**
   * Delete an assistant file.
   *
   * @param assistantId The ID of the assistant that the file belongs to.
   * @param fileId The ID of the file to delete.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return DeleteAssistantFileResponse
   */
  suspend fun deleteAssistantFile(
    assistantId: kotlin.String,
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): DeleteAssistantFileResponse

  /**
   * Delete a thread.
   *
   * @param threadId The ID of the thread to delete.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return DeleteThreadResponse
   */
  suspend fun deleteThread(
    threadId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): DeleteThreadResponse

  /**
   * Retrieves an assistant.
   *
   * @param assistantId The ID of the assistant to retrieve.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return AssistantObject
   */
  suspend fun getAssistant(
    assistantId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): AssistantObject

  /**
   * Retrieves an AssistantFile.
   *
   * @param assistantId The ID of the assistant who the file belongs to.
   * @param fileId The ID of the file we&#39;re getting.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return AssistantFileObject
   */
  suspend fun getAssistantFile(
    assistantId: kotlin.String,
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): AssistantFileObject

  /**
   * Retrieve a message.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message
   *   belongs.
   * @param messageId The ID of the message to retrieve.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return MessageObject
   */
  suspend fun getMessage(
    threadId: kotlin.String,
    messageId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): MessageObject

  /**
   * Retrieves a message file.
   *
   * @param threadId The ID of the thread to which the message and File belong.
   * @param messageId The ID of the message the file belongs to.
   * @param fileId The ID of the file being retrieved.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return MessageFileObject
   */
  suspend fun getMessageFile(
    threadId: kotlin.String,
    messageId: kotlin.String,
    fileId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): MessageFileObject

  /**
   * Retrieves a run.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to retrieve.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun getRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject

  /**
   * Retrieves a run step.
   *
   * @param threadId The ID of the thread to which the run and run step belongs.
   * @param runId The ID of the run to which the run step belongs.
   * @param stepId The ID of the run step to retrieve.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunStepObject
   */
  suspend fun getRunStep(
    threadId: kotlin.String,
    runId: kotlin.String,
    stepId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunStepObject

  /**
   * Retrieves a thread.
   *
   * @param threadId The ID of the thread to retrieve.
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ThreadObject
   */
  suspend fun getThread(
    threadId: kotlin.String,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ThreadObject

  /** enum for parameter order */
  @Serializable
  enum class OrderListAssistantFiles(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of assistant files.
   *
   * @param assistantId The ID of the assistant the file belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListAssistantFilesResponse
   */
  suspend fun listAssistantFiles(
    assistantId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListAssistantFiles? = OrderListAssistantFiles.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListAssistantFilesResponse

  /** enum for parameter order */
  @Serializable
  enum class OrderListAssistants(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of assistants.
   *
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListAssistantsResponse
   */
  suspend fun listAssistants(
    limit: kotlin.Int? = 20,
    order: OrderListAssistants? = OrderListAssistants.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListAssistantsResponse

  /** enum for parameter order */
  @Serializable
  enum class OrderListMessageFiles(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of message files.
   *
   * @param threadId The ID of the thread that the message and files belong to.
   * @param messageId The ID of the message that the files belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListMessageFilesResponse
   */
  suspend fun listMessageFiles(
    threadId: kotlin.String,
    messageId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListMessageFiles? = OrderListMessageFiles.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListMessageFilesResponse

  /** enum for parameter order */
  @Serializable
  enum class OrderListMessages(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of messages for a given thread.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListMessagesResponse
   */
  suspend fun listMessages(
    threadId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListMessages? = OrderListMessages.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListMessagesResponse

  /** enum for parameter order */
  @Serializable
  enum class OrderListRunSteps(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of run steps belonging to a run.
   *
   * @param threadId The ID of the thread the run and run steps belong to.
   * @param runId The ID of the run the run steps belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListRunStepsResponse
   */
  suspend fun listRunSteps(
    threadId: kotlin.String,
    runId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListRunSteps? = OrderListRunSteps.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListRunStepsResponse

  /** enum for parameter order */
  @Serializable
  enum class OrderListRuns(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of runs belonging to a thread.
   *
   * @param threadId The ID of the thread the run belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ListRunsResponse
   */
  suspend fun listRuns(
    threadId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListRuns? = OrderListRuns.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ListRunsResponse

  /**
   * Modifies an assistant.
   *
   * @param assistantId The ID of the assistant to modify.
   * @param modifyAssistantRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return AssistantObject
   */
  suspend fun modifyAssistant(
    assistantId: kotlin.String,
    modifyAssistantRequest: ModifyAssistantRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): AssistantObject

  /**
   * Modifies a message.
   *
   * @param threadId The ID of the thread to which this message belongs.
   * @param messageId The ID of the message to modify.
   * @param modifyMessageRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return MessageObject
   */
  suspend fun modifyMessage(
    threadId: kotlin.String,
    messageId: kotlin.String,
    modifyMessageRequest: ModifyMessageRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): MessageObject

  /**
   * Modifies a run.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to modify.
   * @param modifyRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun modifyRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    modifyRunRequest: ModifyRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject

  /**
   * Modifies a thread.
   *
   * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
   * @param modifyThreadRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return ThreadObject
   */
  suspend fun modifyThread(
    threadId: kotlin.String,
    modifyThreadRequest: ModifyThreadRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): ThreadObject

  /**
   * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and
   * &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used
   * to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be
   * submitted in a single request.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param runId The ID of the run that requires the tool output submission.
   * @param submitToolOutputsRunRequest
   * @param configure optional configuration for the request, allows overriding the default
   *   configuration.
   * @return RunObject
   */
  suspend fun submitToolOuputsToRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    submitToolOutputsRunRequest: SubmitToolOutputsRunRequest,
    configure: HttpRequestBuilder.() -> Unit = {}
  ): RunObject
}

fun Assistants(client: HttpClient, config: Config): Assistants =
  object : Assistants {
    override suspend fun cancelRun(
      threadId: kotlin.String,
      runId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}/cancel"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun createAssistant(
      createAssistantRequest: CreateAssistantRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): AssistantObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("assistants") }
          setBody(createAssistantRequest)
        }
        .body()

    override suspend fun createAssistantFile(
      assistantId: kotlin.String,
      createAssistantFileRequest: CreateAssistantFileRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): AssistantFileObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path(
              "assistants/{assistant_id}/files".replace("{" + "assistant_id" + "}", "$assistantId")
            )
          }
          setBody(createAssistantFileRequest)
        }
        .body()

    override suspend fun createMessage(
      threadId: kotlin.String,
      createMessageRequest: CreateMessageRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): MessageObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("threads/{thread_id}/messages".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(createMessageRequest)
        }
        .body()

    override suspend fun createRun(
      threadId: kotlin.String,
      createRunRequest: CreateRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("threads/{thread_id}/runs".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(createRunRequest)
        }
        .body()

    override fun createRunStream(
      threadId: kotlin.String,
      createRunRequest: CreateRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): Flow<AssistantEvent> = flow {
      client
        .prepareRequest {
          timeout {
            requestTimeoutMillis = 60.seconds.toLong(DurationUnit.MILLISECONDS)
            socketTimeoutMillis = 60.seconds.toLong(DurationUnit.MILLISECONDS)
          }
          configure()
          method = HttpMethod.Post
          accept(ContentType.Text.EventStream)
          header(HttpHeaders.CacheControl, "no-cache")
          header(HttpHeaders.Connection, "keep-alive")
          contentType(ContentType.Application.Json)
          url { path("/threads/{thread_id}/runs".replace("{" + "thread_id" + "}", "$threadId")) }
          val element = Json.encodeToJsonElement(CreateRunRequest.serializer(), createRunRequest)
          val jsObject = JsonObject(element.jsonObject + Pair("stream", JsonPrimitive(true)))
          setBody(jsObject)
        }
        .execute {
          streamEvents(it, config.json, config.streamingPrefix, config.streamingDelimiter)
        }
    }

    override suspend fun createThread(
      createThreadRequest: CreateThreadRequest?,
      configure: HttpRequestBuilder.() -> Unit
    ): ThreadObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("threads") }
          setBody(createThreadRequest)
        }
        .body()

    override suspend fun createThreadAndRun(
      createThreadAndRunRequest: CreateThreadAndRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("threads/runs") }
          setBody(createThreadAndRunRequest)
        }
        .body()

    override fun createThreadAndRunStream(
      createThreadAndRunRequest: CreateThreadAndRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): Flow<AssistantEvent> = flow {
      client
        .prepareRequest {
          timeout {
            requestTimeoutMillis = 60.seconds.toLong(DurationUnit.MILLISECONDS)
            socketTimeoutMillis = 60.seconds.toLong(DurationUnit.MILLISECONDS)
          }
          configure()
          method = HttpMethod.Post
          accept(ContentType.Text.EventStream)
          header(HttpHeaders.CacheControl, "no-cache")
          header(HttpHeaders.Connection, "keep-alive")
          contentType(ContentType.Application.Json)
          url { path("/threads/runs") }
          val element =
            Json.encodeToJsonElement(
              CreateThreadAndRunRequest.serializer(),
              createThreadAndRunRequest
            )
          val jsObject = JsonObject(element.jsonObject + Pair("stream", JsonPrimitive(true)))
          setBody(jsObject)
        }
        .execute {
          streamEvents(it, config.json, config.streamingPrefix, config.streamingDelimiter)
        }
    }

    override suspend fun deleteAssistant(
      assistantId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): DeleteAssistantResponse =
      client
        .request {
          configure()
          method = HttpMethod.Delete
          contentType(ContentType.Application.Json)
          url {
            path("assistants/{assistant_id}".replace("{" + "assistant_id" + "}", "$assistantId"))
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun deleteAssistantFile(
      assistantId: kotlin.String,
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): DeleteAssistantFileResponse =
      client
        .request {
          configure()
          method = HttpMethod.Delete
          contentType(ContentType.Application.Json)
          url {
            path(
              "assistants/{assistant_id}/files/{file_id}"
                .replace("{" + "assistant_id" + "}", "$assistantId")
                .replace("{" + "file_id" + "}", "$fileId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun deleteThread(
      threadId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): DeleteThreadResponse =
      client
        .request {
          configure()
          method = HttpMethod.Delete
          contentType(ContentType.Application.Json)
          url { path("threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getAssistant(
      assistantId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): AssistantObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path("assistants/{assistant_id}".replace("{" + "assistant_id" + "}", "$assistantId"))
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getAssistantFile(
      assistantId: kotlin.String,
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): AssistantFileObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path(
              "assistants/{assistant_id}/files/{file_id}"
                .replace("{" + "assistant_id" + "}", "$assistantId")
                .replace("{" + "file_id" + "}", "$fileId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getMessage(
      threadId: kotlin.String,
      messageId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): MessageObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/messages/{message_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "message_id" + "}", "$messageId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getMessageFile(
      threadId: kotlin.String,
      messageId: kotlin.String,
      fileId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): MessageFileObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/messages/{message_id}/files/{file_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "message_id" + "}", "$messageId")
                .replace("{" + "file_id" + "}", "$fileId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getRun(
      threadId: kotlin.String,
      runId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getRunStep(
      threadId: kotlin.String,
      runId: kotlin.String,
      stepId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): RunStepObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}/steps/{step_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
                .replace("{" + "step_id" + "}", "$stepId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun getThread(
      threadId: kotlin.String,
      configure: HttpRequestBuilder.() -> Unit
    ): ThreadObject =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url { path("threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listAssistantFiles(
      assistantId: kotlin.String,
      limit: kotlin.Int?,
      order: OrderListAssistantFiles?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListAssistantFilesResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url {
            path(
              "assistants/{assistant_id}/files".replace("{" + "assistant_id" + "}", "$assistantId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listAssistants(
      limit: kotlin.Int?,
      order: OrderListAssistants?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListAssistantsResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url { path("assistants") }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listMessageFiles(
      threadId: kotlin.String,
      messageId: kotlin.String,
      limit: kotlin.Int?,
      order: OrderListMessageFiles?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListMessageFilesResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url {
            path(
              "threads/{thread_id}/messages/{message_id}/files"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "message_id" + "}", "$messageId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listMessages(
      threadId: kotlin.String,
      limit: kotlin.Int?,
      order: OrderListMessages?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListMessagesResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url { path("threads/{thread_id}/messages".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listRunSteps(
      threadId: kotlin.String,
      runId: kotlin.String,
      limit: kotlin.Int?,
      order: OrderListRunSteps?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListRunStepsResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}/steps"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
            )
          }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listRuns(
      threadId: kotlin.String,
      limit: kotlin.Int?,
      order: OrderListRuns?,
      after: kotlin.String?,
      before: kotlin.String?,
      configure: HttpRequestBuilder.() -> Unit
    ): ListRunsResponse =
      client
        .request {
          configure()
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          parameter("limit", limit)
          parameter("order", order)
          parameter("after", after)
          parameter("before", before)
          url { path("threads/{thread_id}/runs".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun modifyAssistant(
      assistantId: kotlin.String,
      modifyAssistantRequest: ModifyAssistantRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): AssistantObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path("assistants/{assistant_id}".replace("{" + "assistant_id" + "}", "$assistantId"))
          }
          setBody(modifyAssistantRequest)
        }
        .body()

    override suspend fun modifyMessage(
      threadId: kotlin.String,
      messageId: kotlin.String,
      modifyMessageRequest: ModifyMessageRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): MessageObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/messages/{message_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "message_id" + "}", "$messageId")
            )
          }
          setBody(modifyMessageRequest)
        }
        .body()

    override suspend fun modifyRun(
      threadId: kotlin.String,
      runId: kotlin.String,
      modifyRunRequest: ModifyRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
            )
          }
          setBody(modifyRunRequest)
        }
        .body()

    override suspend fun modifyThread(
      threadId: kotlin.String,
      modifyThreadRequest: ModifyThreadRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): ThreadObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url { path("threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId")) }
          setBody(modifyThreadRequest)
        }
        .body()

    override suspend fun submitToolOuputsToRun(
      threadId: kotlin.String,
      runId: kotlin.String,
      submitToolOutputsRunRequest: SubmitToolOutputsRunRequest,
      configure: HttpRequestBuilder.() -> Unit
    ): RunObject =
      client
        .request {
          configure()
          method = HttpMethod.Post
          contentType(ContentType.Application.Json)
          url {
            path(
              "threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
                .replace("{" + "thread_id" + "}", "$threadId")
                .replace("{" + "run_id" + "}", "$runId")
            )
          }
          setBody(submitToolOutputsRunRequest)
        }
        .body()
  }
