/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.model

import com.xebia.functional.openai.generated.model.CreateTranscriptionRequestModel.Supported.whisper_1
import kotlin.jvm.JvmStatic
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.encoding.*

/**
 * ID of the model to use. Only `whisper-1` is currently available.
 *
 * Values: whisper_1
 */
// We define a serializer for the parent sum type,
// and then use it to serialize the child types
@Suppress("SERIALIZER_TYPE_INCOMPATIBLE")
@Serializable(with = CreateTranscriptionRequestModelSerializer::class)
sealed interface CreateTranscriptionRequestModel {
  val name: kotlin.String

  @Serializable(with = CreateTranscriptionRequestModelSerializer::class)
  enum class Supported(name: kotlin.String) : CreateTranscriptionRequestModel {
    @SerialName(value = "whisper-1") whisper_1("whisper-1");

    override fun toString(): kotlin.String = name
  }

  @Serializable(with = CreateTranscriptionRequestModelSerializer::class)
  data class Custom(override val name: kotlin.String) : CreateTranscriptionRequestModel

  companion object {
    @JvmStatic
    fun valueOf(name: kotlin.String): CreateTranscriptionRequestModel =
      values().firstOrNull { it.name == name } ?: Custom(name)

    inline val whisper_1: CreateTranscriptionRequestModel
      get() = Supported.whisper_1

    @JvmStatic fun values(): List<CreateTranscriptionRequestModel> = Supported.entries

    // Is this resulting in a recursive loop!?
    //      @JvmStatic
    //      fun serializer(): KSerializer<CreateTranscriptionRequestModel> =
    //        CreateTranscriptionRequestModelSerializer
  }
}

private object CreateTranscriptionRequestModelSerializer :
  KSerializer<CreateTranscriptionRequestModel> {
  private val valueSerializer = kotlin.String.serializer()
  override val descriptor = valueSerializer.descriptor

  override fun deserialize(decoder: Decoder): CreateTranscriptionRequestModel {
    val value = decoder.decodeSerializableValue(valueSerializer)
    return CreateTranscriptionRequestModel.valueOf(value)
  }

  override fun serialize(encoder: Encoder, value: CreateTranscriptionRequestModel) {
    encoder.encodeSerializableValue(valueSerializer, value.name)
  }
}
